generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id
  email         String             @unique
  displayName   String
  // hashedPasswordは削除（Cognitoで管理）
  cognitoSub    String             @unique  // Cognito User Pool内のユーザーの一意識別子
  spaces        PhotoSpaceMember[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model PhotoSpace {
  id          String             @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean            @default(false)
  members     PhotoSpaceMember[]
  albums      PhotoAlbum[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model PhotoSpaceMember {
  id        String         @id @default(cuid())
  spaceId   String
  userId    String
  role      MemberRole     @default(CONTRIBUTOR)
  space     PhotoSpace     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    Photo[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([spaceId, userId])
  @@index([spaceId])
  @@index([userId])
}

model PhotoAlbum {
  id          String      @id @default(cuid())
  title       String
  description String?
  spaceId     String
  space       PhotoSpace  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  photos      Photo[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([spaceId])
}

model Photo {
  id             String            @id @default(cuid())
  title          String
  description    String?
  storagePath    String
  sourceFilename String
  mimeType       String
  fileSizeBytes  Int
  imageWidth     Int?
  imageHeight    Int?
  imageMetadata  Json?
  createdById    String
  creator        PhotoSpaceMember  @relation(fields: [createdById], references: [id], onDelete: Cascade)
  albums         PhotoAlbum[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([createdById])
}

enum MemberRole {
  OWNER
  CONTRIBUTOR
  VIEWER
}
